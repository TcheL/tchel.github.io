<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MPI 二维切割子程序 MPI_CART_CREATE、MPI_CART_COORDS 和 MPI_CART_SHIFT]]></title>
    <url>%2F2018%2F11%2F03%2FMPI-Cartesian-Function%2F</url>
    <content type="text"><![CDATA[写在前面 注：这里只介绍了 MPI 二维切割在 Fortran 语言中的应用，于 C 语言，类似但略有差别。 专用词语转录说明如下： 原词 转录 程式 程序 副程式 子程序 阵列 数组 叫用 调用 引数 参数 communicator 通信域 CPU id 进程编号 整数阵列 整型数组 逻辑阵列 逻辑型数组 变数 变量 安排 排布 运作 运行 邻居 邻位 垂直坐标图示法则（Cartesian Topology）二维数组 A(NN, MM) 要做二维切割时，需先说明在第一维和第二维各切成几块。例如第一维要切成四块，第二维要切成三块，则切割后第一维的长度 N 为 NN/4，第二维的长度 M 为 MM/3，当然两者都必须能整除才行。如果 NN = 200 和 MM = 150，就可以使用 PARAMETER 来设定 M、N 的值，切割后数组的第一维和第二维都要预留前后各一个数组元素位置时，其参数可设定为：12PARAMETER (NN=200, MM=150, JP=4, IP=3, N=NN/JP, M=MM/IP,)DIMENSION A(0:N+1, 0:M+1) 数组 A 切成 4×3 十二块，第一块由一个 CPU 来执行时，则需要十二个 CPU。这十二个 CPU 的编号和坐标如下图所示：十二个 CPU 之中每一个 CPU 的上、下、左、右邻位关系如上图所示。水平方向 X 轴为第一维 (J) ，垂直方向 Y 轴为第二维 (I) 。 MPI_CART_CREATE二维切割方式必须在调用 MPI_CART_SIZE、MPI_COMM_RANK 分别取得通信域的进程数和进程编号等之后，再调用 MPI 子程序 MPI_CART_CREATE 来加以设定。如上图所示的二维切割方式，其相应的参数设定如下：123456789101112131415PARAMETER (NDIM=2, JP=4, IP=3)INTEGER NPROC, MYIDINTEGER IPART(NDIM), COMM2D, MY_CID, MY_COORD(NDIM)INTEGER SIDEWAYS, UPDOWN, RIGHT, UP, L_NBR, R_NBR, T_NBR, B_NBRLOGICAL PERIODS(NDIM), REORDER...CALL MPI_INIT (IERR)CALL MPI_COMM_SIZE (MPI_COMM_WORLD, NPROC, IERR)IPART(1)=JPIPART(2)=IPPERIODS(1)=.FALSE.PERIODS(2)=.FALSE.REORDER=.TRUE.CALL MPI_CART_CREATE (MPI_COMM_WORLD, NDIM, IPART, PERIODS, REORDER, COMM2D, IERR) 参数 含义 MPI_COMM_WORLD 原来的通信域 NDIM 切割的维数，上图中二维切割的例子需设定为 2 IPART NDIM 个元素的整型数组 IPART(1) 第一维切成的块数，上图中的例子需设定为 4 IPART(2) 第二维切成的块数，上图中的例子需设定为 3 PERIODS NDIM 个元素的逻辑型数组 PERIODS(1) 第一维首尾区块是否相邻，是为 .TRUE. 否为 .FALSE. ，上图中的例子需设定为 .FALSE. PERIODS(2) 第二维首尾区块是否相邻，是为 .TRUE. 否为 .FALSE. ，上图中的例子需设定为 .FALSE. REORDER 逻辑型变量，已排定的 CPU 是否重排，是为 .TRUE. 否为 .FALSE. ，一般设为 .TRUE. COMM2D 切割后得到的新通信域 在调用 MPI_CART_CREATE 之前已经调用过 MPI_COMM_RANK，已经排布好各个 CPU 了，这是一种线性排布。在调用 MPI_CART_CREATE 时，是一种平面排布，当 REORDER 的值设定为 .TRUE. 时，允许系统重新排布各个 CPU，使得相邻的 CPU 排布在相邻的位置上，从而得到最佳的传输效率。 MPI_CART_COORDS此后，程序在新的的通信域 COMM2D 中运行，之前获取的进程编号已经不再适用。必须重新调用 MPI_COMM_RANK 获取当前 CPU 在新的通信域中的进程号。MPI_COMM_RANK 的调用格式如下：1CALL MPI_COMM_RANK (COMM2D, MYID, IERR) 参数 含义 COMM2D 新设定的通信域 MYID 在通信域 COMM2D 中的新的进程号 MYID 的排布方式如上图中的 CPU0、CPU1、CPU2 等所示。接下来就须调用 MPI_CART_COORDS 获取当前 CPU 在二维 CPU 数组中的坐标 MY_COORD。调用格式如下：1CALL MPI_CART_COORDS (COMM2D, MY_CID, NDIM, MY_COORD, IERR) 参数 含义 COMM2D 新设定的通信域 MY_CID 在通信域 COMM2D 中的进程号 NDIM 切割的维数，如上图中的例子需设定为 2 MY_COORD NDIM 个元素的整型数组，进程号为 MY_CID 的 CPU 的 CPU 数组坐标 MY_COORD(1) 第一维方向上的坐标，从 0 起算 MY_COORD(2) 第二维方向上的坐标，从 0 起算 CPU 坐标 MY_COORD 的排布方式如上图中 CPU0、CPU1、CPU2 等进程号下的括号内的数字。由上图易知：当 MY_COORD(1) 为 0 时，该 CPU 位于 CPU 数组的最左边；当 MY_COORD(1) 为 JP - 1 时，该 CPU 位于 CPU 数组的最右边；当 MY_COORD(2) 为 0 时，该 CPU 位于 CPU 数组的最下面（底边）；当 MY_COORD(2) 为 IP - 1 时，该 CPU 位于 CPU 数组的最上面（顶边）。 MPI_CART_SHIFT现在，还须调用 MPI_CART_SHIFT 来获取当前 CPU 的上、下、左、右邻位的进程号。调用格式如下：12345678INTEGER SIDEWAYS, UPDOWN, RIGHT, UPSIDEWAYS=0UPDOWN=1RIGHT=1UP=1CALL MPI_CART_SHIFT (COMM2D, SIDEWAYS, RIGHT, L_NBR, R_NBR, IERR)CALL MPI_CART_SHIFT (COMM2D, UPDOWN, UP, B_NBR, T_NBR, IERR) 参数 含义 COMM2D 新设定的通信域 SIDEWAYS 整型变量，其值为 0 表示获取第一维 (J) 方向的邻位 RIGHT 整型变量，其值为 1 表示获取左、右邻位 L_NBR 整型变量，其值为获取的当前 CPU 的左邻位的进程号 R_NBR 整型变量，其值为获取的当前 CPU 的右邻位的进程号 参数 含义 UPDOWN 整型变量，其值为 1 表示获取第二维 (I) 方向的邻位 UP 整型变量，其值为 1 表示获取下、上邻位 B_NBR 整型变量，其值为获取的当前 CPU 的下邻位的进程号 T_NBR 整型变量，其值为获取的当前 CPU 的上邻位的进程号 这里，L_NBR、R_NBR、B_NBR 和 T_NBR 分别代表 left_neighbor、right_neighbor、bottom_neighbor 和 top_neighbor。 参考 郑守成，2002，《Fortran 語言 MPI 平行计算程式设计》第五章 5.4 节]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>MPI</tag>
        <tag>Parallel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些不可吿人的小东西]]></title>
    <url>%2F2018%2F11%2F03%2FPassword%2F</url>
    <content type="text"><![CDATA[Welcome but enter password to read Incorrect Password! No content to display! U2FsdGVkX19C6S5Nko8ePTC8H7qBHIJG/WG4xU1+IiCJcqipILPnG8gSn7vykWcaKIWtkOF2F6o4fD1bXGovs8Yws8x7+zQgnEjJDp/8uUWGjie0I2nbIstCCyX3XfyYf1n/UTMSm8A4WMun12+wSFhAmXM0ni5M6EVc3Gy0bIQa9d/OAQ7f16ZsLOQ/2de572MxbludI36pW3PaFY0OX7YUEbJfiaktrxt2kKQXhRnlM4jNpiLPodtaHdfMsFUsAPnAlv6gZlbx/21r3c+5/fYfiaHpwnZNHNM1ZhbHKX6YV0tBQ+DPF5oDXtrPdmdRT2IKvoFuQuYLTJFQaceMpsTdZGOrxr2enieC3CEeG+YqXJgoWhW4+YH0xKu24LF2QQbROieGUwLzOU0uJ7XHGe3WiwynohjAhspOPlzjzqqMzNlehVH+NiR1jdR/eVsv/fPp9O+/Pt6wlybNEVX4jBmLBVXK/F+7vqx8JslSju0U5PV8YYtS2sedggpCB+9lA0YsEIfY/wAj1/MVUbZFnSHzStbc64s/UnqihwyKsyE5Ty/cLqm558mFUlGuoM+KTGk/En4tD7T0MMpQ5Ty7D1Hib/+5/UvO/euY2F3jJPEqKLbUS5FVe7Njg9gH6w2s01niok4ogiBVTDPN+v35VehR1+U1sYxVuTqw7kF+/5pjrROg3vEb4Q8lTkKmDhqYfFWhiF7hHN5tyoEj8h1Z7u3fsjl0dE9ZHncYf5p3TEGQfJ+8fwbBwqK7hIg2kEbuLKznH/ii2v0Qgby+WyRRrVpVo0VYhp93256z60qjb6p6I4U8tX0piuTORjdNnaWtPbEHGeMgtvTkEEUJOoGZLE+z6wuvE+7f10g/pPPWkp4Sm3rIoUvvim1Mrjw6IXniBeZ1vc1gtPcTj0iiMM6f37ql29PmRZab7ZFxLZUw22eEg1xxS50kvYQ2OLsC2SNAjcYMVfZJwZgsEEVcC5xPX7PpZ/CXalB2N0iMiIcozlnecI4lJfTF0oSUCZaePLNH3wog0Giz2U4v9C+Ve/8BRwhbOHOxvjR/x24mbySKva6hVhICLtNlUNaj5PDIsfJMbxcwc35G8dpZ4QPOIoF26LvNviCXjFTib5sHhb7u8ZYygjmME3obCxOiZ9GklpmFgzHN5XFY3i4eKB+zXNDDQJV42LLYYoTXmk80bfMoM1p6qJLTk2aLCwa5fvXmighuIPW6YJIjwenBoyaXAuKAX5CMVbkjvSGEaCaRJxEcTVwYNLF5UhJscAP8qFguHvcRNbDsCOwnq+iicIB4j9Xl3Q==]]></content>
      <categories>
        <category>NOpen</category>
      </categories>
      <tags>
        <tag>Secret</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二阶方阵的逆]]></title>
    <url>%2F2018%2F09%2F29%2FThe-Inverse-Matrix-of-2x2%2F</url>
    <content type="text"><![CDATA[基础知识逆矩阵方阵 $A$ 的逆矩阵： $$A^{-1}=\frac{1}{|A|}A^*$$ 其中，$|A|$ 为 $A$ 的行列式，$A^*$ 为 $A$ 的伴随矩阵。 行列式方阵 $A$ 的行列式： $$|A|=\left|\begin{array}{c} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \newline a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \newline \vdots &amp; \vdots &amp; \ddots &amp; \vdots \newline a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \end{array}\right|=\sum_k(-1)^ka_{1k_1}a_{2k_2}\cdots a_{nk_n}$$ 其中，$k_1, k_2, \cdots, k_n$ 是将序列 $1, 2, \cdots, n$ 的元素次序交换 $k$ 次所得到的一个序列。 伴随矩阵方阵 $A$ 的伴随矩阵为： $$A^*=\left[\begin{array}{c} A_{11} &amp; A_{21} &amp; \cdots &amp; A_{n1} \newline A_{12} &amp; A_{22} &amp; \cdots &amp; A_{n2} \newline \vdots &amp; \vdots &amp; \ddots &amp; \vdots \newline A_{1n} &amp; A_{2n} &amp; \cdots &amp; A_{nn} \end{array}\right]$$ 其中，$A_{ij}$ 为矩阵 $A$ 的元素 $a_{ij}$ 的代数余子式。 代数余子式在 $n$ 阶行列式 $A$ 中任意选定的 $k$ 行 $k$ 列元素，其中在行列交点上的元素按原顺序排列组成的 $k$ 阶行列式，称为行列式 $A$ 的 $k$ 阶子式 $D$ 。 在 $n$ 阶行列式 $A$ 中划去任意选定的 $k$ 行 $k$ 列元素后，余下的元素按原顺序排列组成的 $n-k$ 阶行列式，称为行列式 $A$ 的 $k$ 阶子式 $D$ 的余子式 $M$ 。 如果所选定的行列在行列式 $A$ 中的行列序号分别为 $i_1, i_2, \cdots, i_k$ 和 $j_1, j_2, \cdots, j_k$ ，则行列式 $A$ 的 $k$ 阶子式 $D$ 的代数余子式为 $$(-1)^{(i_1+i_2+\cdots+i_k)+(j_1+j_2+\cdots+j_k)}\cdot M$$ 二阶矩阵的逆对于二阶矩阵 $A=\left[\begin{array}{c} a_{11} &amp; a_{12} \newline a_{21} &amp; a_{22} \end{array}\right]$ ： $|A|=a_{11}\cdot a_{22}-a_{12}\cdot a_{21}$ ， $A_{11} = (-1)^{(1+1)}\cdot a_{22}=a_{22}$ ， $A_{12}=(-1)^{(1+2)}\cdot a_{21}=-a_{21}$ ， $A_{21}=(-1)^{(2+1)}\cdot a_{12}=-a_{12}$ ， $A_{22}=(-1)^{(2+2)}\cdot a_{11}=a_{11}$ ， 则其伴随矩阵为 $$A^*=\left[\begin{array}{c} A_{11} &amp; A_{21} \newline A_{12} &amp; A_{22} \end{array}\right]=\left[\begin{array}{c} a_{22} &amp; -a_{12} \newline -a_{21} &amp; a_{11} \end{array}\right]$$ 其逆矩阵为 $$A^{-1}=\frac{1}{|A|}\cdot A^*=\frac{1}{a_{11}\cdot a_{22}-a_{12}\cdot a_{21}}\cdot\left[\begin{array}{c} a_{22} &amp; -a_{12} \newline -a_{21} &amp; a_{11} \end{array}\right]$$]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Inverse matrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cuda C 学习之路]]></title>
    <url>%2F2018%2F09%2F02%2FTips-of-Cuda-C%2F</url>
    <content type="text"><![CDATA[C 相关 C 语言中函数形参默认传值，即函数内部修改形参不会改变实参的值；但可以通过指针形参传递实参地址，修改指针引用值可以改变实参的值。 在变量单双精度切换时，使用 scanf 函数读入数据到变量也需在格式字符串 %f 和 %lf 之间切换，但使用 printf 函数输出变量数据则不需切换。 Cuda 相关 Cuda kernel 函数不允许通过指针形参传递单变量地址，修改指针引用值不会改变外部实参的值。 在 Cuda kernel 函数内进行屏幕输出时，可在 host 端 kernel 函数之后加上 cudaDeviceReset(); 确保屏幕及时输出。 若运行时报错 “Too many resources requested for lanch”，可能是处理器上的 register 数超出了限制，可减少 the number of threads per block 后再次尝试运行。]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Cuda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些数学概念]]></title>
    <url>%2F2018%2F07%2F22%2FBasic-of-Math%2F</url>
    <content type="text"><![CDATA[Hilbert 变换定义参考 Wikipedia 。 The Hilbert transform of the function $u(t)$ can be thought of as the convolution of $u(t)$ with the function $h(t)=\frac{1}{\pi t}$. Because $h(t)$ is not integrable, the integrals defining the convolution do not converge. Instead, the Hilbert transform is defined using the Cauchy principal value (denoted here by $p$ ): $$\mathcal{H}{u(t)}=p\int_{-\infty}^{\infty}u(\tau)h(t-\tau)d\tau=\frac{1}{\pi}p\int_{-\infty}^{\infty}\frac{u(\tau)}{t-\tau}d\tau$$ 性质A property of Hilbert transform is: $\mathcal{H}{\mathcal{H}{u(t)}}=-u(t)$. 解析信号The analytic signal is constructed from a real signal $f(t)$ and its Hilbert transform $\mathcal{H}{f(t)}$ : $$\tilde f(t)=f(t)-i\mathcal H{f(t)}$$ The analytic signal can be written in terms of the instantaneous amplitude $E(t)$ and the instantaneous phase $\phi(t)$ as $$\tilde f(t)=E(t)e^{i\phi(t)}$$ where $$\phi(t)=\arctan\frac{\mathfrak I{\tilde f(t)}}{\mathfrak R{\tilde f(t)}}=\arctan\frac{\mathcal H{f(t)}}{f(t)}$$ $$E(t)=\sqrt{\mathfrak R{\tilde f(t)}^2+\mathfrak I{\tilde f(t)}^2}=\sqrt{f(t)^2+\mathcal H{f(t)}^2}$$ 共轭转置定义又称 Hermitian 转置。参考 Wikipedia 。 In mathematics, the conjugate transpose and Hermitian transpose of an $m\times n$ matrix $A$ with complex entries is the $n\times m$ matrix $A^*$ obtained from $A$ by taking the transpose and then taking the complex conjugate of each entry. The definition can also be written as $$A^*=(\bar{A})^T=\overline{A^T}$$ The commonly used symbols for the conjugate transpose: $A^*$ or $A^H$ in linear algebra ; $A^\dagger$ in quantum mechanics ; $A^+$. 例子If $A=\begin{bmatrix} 1 &amp; -2-i \newline 1+i &amp; i \end{bmatrix} $, then $A^*=\begin{bmatrix} 1 &amp; 1-i \newline -2+i &amp; -i \end{bmatrix}$. Kronecker 乘积定义参考 Wikipedia 。 In mathematics, the Kronecker product, denoted by $\otimes$, is an operation on two matrices of arbitrary size resulting in a block matrix. It is a generalization of the outer product from vectors to matrices. If $A$ is an $m\times n$ matrix and $B$ is a $p\times q$ matrix, then the Kronecker product $A\otimes B$ is the $mp\times nq$ block matrix: $$A\otimes B=\left[\begin{array}{c} a_{11}B &amp; a_{12}B &amp; \cdots &amp; a_{1n}B \newline a_{21}B &amp; a_{22}B &amp; \cdots &amp; a_{2n}B \newline \vdots &amp; \vdots &amp; \ddots &amp; \vdots \newline a_{m1}B &amp; a_{m2}B &amp; \cdots &amp; a_{mn}B \end{array}\right]$$ where $$a_{ij}B=\left[ \begin{array}{c} a_{ij}b_{11} &amp; a_{ij}b_{12} &amp; \cdots &amp; a_{ij}b_{1q} \newline a_{ij}b_{21} &amp; a_{ij}b_{22} &amp; \cdots &amp; a_{ij}b_{2q} \newline \vdots &amp; \vdots &amp; \ddots &amp; \vdots \newline a_{ij}b_{p1} &amp; a_{ij}b_{p2} &amp; \cdots &amp; a_{ij}b_{pq} \end{array} \right]$$ 例子$$\left[\begin{array}{c} 1 &amp; 2 \newline 3 &amp; 4 \end{array}\right] \otimes \left[\begin{array}{c} 0 &amp; 5 \newline 6 &amp; 7 \end{array}\right]=\left[\begin{array}{c} 1\cdot \left[\begin{array}{c} 0 &amp; 5 \newline 6 &amp; 7 \end{array}\right] &amp; 2\cdot \left[\begin{array}{c} 0 &amp; 5 \newline 6 &amp; 7 \end{array}\right] \newline 3\cdot \left[\begin{array}{c} 0 &amp; 5 \newline 6 &amp; 7 \end{array}\right] &amp; 4\cdot \left[\begin{array}{c} 0 &amp; 5 \newline 6 &amp; 7 \end{array}\right] \end{array}\right]=\left[\begin{array}{c} 0 &amp; 5 &amp; 0 &amp; 10 \newline 6 &amp; 7 &amp; 12 &amp; 14 \newline 0 &amp; 15 &amp; 0 &amp; 20 \newline 18 &amp; 21 &amp; 24 &amp; 28 \end{array}\right]$$ Frobenius 范数定义也即 Hilbert-Schmidt 范数。参考 Wikipedia 。 The norm can be defined in various ways: $$||A||_F=\sqrt{\sum_{i=1}^m\sum_{j=1}^n|a_{ij}|^2}=\sqrt{trace(A^\dagger A)}=\sqrt{\sum_{i=1}^{min\lbrace m,n\rbrace}\sigma_i^2(A)}$$ where $A^\dagger$ denotes the conjugate transpose of $A$, and $\sigma_i(A)$ are the singular value of $A$. Frobenius 内积参考 Wikipedia 。 $$||A||_F=\sqrt{\langle A,A\rangle_F}$$ where the Frobenius inner product is defined by: $$\langle A,B\rangle_F=\sum_{i,j}\overline{A_{ij}}B_{ij}=trace(\overline{A^T}B)$$ Hadamard 乘积定义也即 Hadamard matrices 。参考 Wikipedia https://en.wikipedia.org/wiki/Hadamard_product_(matrices) 。 For two matrices, $A, B$, of the same dimension, $m\times n$, the Hadamard product, $A\circ B$, is a matrix of the same dimension as the operands, with elements given by $$(A\circ B)_{i,j}=A_{i,j}B_{i,j}$$ The Hadamard division $A\oslash B$ is defined as: $$(A\oslash B)_{ij}=\frac{A_{ij}}{B_{ij}}$$ 性质 The Hadamard product is commutative, associative and distributive over addition, that is: $A\circ B=B\circ A$ $A\circ(B\circ C)=(A\circ B)\circ C$ $A\circ(B+C)=A\circ B+A\circ C$ For square matrices $A, B$, the row-sums of their Hadamard product are the diagonal elements of $AB^T$ or $B^TA$: $\sum_i(A\circ B)_{i,j}=(B^TA)_{j,j}$ $\sum_j(A\circ B)_{i,j}=(AB^T)_{i,i}$ Hilbert 矩阵定义参考 Wikipedia 。 In linear algebra, a Hilbert matrix is a square matrix with entries being the unit fractions: $$H_{ij}=\frac{1}{i+j-1}$$ For example, this is the $3\times 3$ Hilbert matrix: $$H=\left[\begin{array}{c} 1 &amp; \frac{1}{2} &amp; \frac{1}{3} \newline \frac{1}{2} &amp; \frac{1}{3} &amp; \frac{1}{4} \newline \frac{1}{3} &amp; \frac{1}{4} &amp; \frac{1}{5} \end{array}\right]$$ 应用The notoriously ill-conditioned Hilbert matrix can be defined as: $$J_{ij}:=\begin{cases} \frac{1}{i+j-1} &amp; \text{if }i\text{ mod }j=0\text{, or }j\text{ mod }j=0 \newline 0 &amp; \text{otherwise} \end{cases}$$ For example, if given by $n=5$, the matrix $J$ has the condition number of $4.9\times 10^3$. 矩阵的条件数（condition number）矩阵 $A$ 的条件数可定义为： $$\kappa(A)=||A||\cdot ||A^{-1}||$$ 如果方阵 $A$ 是奇异的，那么 $A$ 的条件数为正无穷大。实际上，每一个可逆方阵都存在一个条件数。 条件数是一个矩阵（或它所描述的线性系统）的稳定性或敏感度的度量。 A problem with a low condition number is said to be well-conditioned, while a problem with a high condition number is said to be ill-conditioned.]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Hilbert</tag>
        <tag>Kronecker</tag>
        <tag>Frobenius</tag>
        <tag>Hadamard</tag>
        <tag>Condition number</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些算法原理]]></title>
    <url>%2F2018%2F07%2F22%2FPrinciple-of-Algorithm%2F</url>
    <content type="text"><![CDATA[BFGS 算法也即 Broyden-Fletcher-Goldfarb-Shanno 算法。参考 Wikipedia 。 原理The search direction at stage $k$ is given by the Newton method: $$p_k=-B_k\nabla f(x_k)$$ where $B_k$ is an approximation of the Hessian matrix, and $\nabla f(x_k)$ is the gradient of the function at $x_k$ The quasi-Newton condition imposed on the update of $B_k$ is: $$B_{k+1}(x_{k+1}-x_k)=\nabla f(x_{k+1})-\nabla f(x_k)$$ Let $y_k=\nabla f(x_{k+1})-\nabla f(x_k)$ and $s_k=x_{k+1}-x_k$, then $B_{k+1}s_k=y_k$ which is the secant equation. The curvature condition $s_k^Ty_k&gt;0$ should be satisfied. In the BFGS method, instead of requiring the full Hessian matrix at $x_{k+1}$ to be computed, the approximate Hessian is given by: $$B_{k+1}=B_k+\frac{y_ky_k^T}{y_k^Ts_k}-\frac{B_ks_ks_k^TB_k}{s_k^TB_ks_k}$$ $$B_{k+1}^{-1}=\left(I-\frac{s_ky_k^T}{y_k^Ts_k}\right)B_k^{-1}\left(I-\frac{y_ks_k^T}{y_k^Ts_k}\right)+\frac{s_ks_k^T}{y_k^Ts_k}$$ or $$B_{k+1}^{-1}=B_k^{-1}+\frac{(s_k^Ty_k+y_k^TB_k^{-1}y_k)(s_ks_k^T)}{(s_k^Ty_k)^2}-\frac{B_k^{-1}y_ks_k^T+s_ky_k^TB_k^{-1}}{s_k^Ty_k}$$ 算法From an initial guess $x_0$ and an approximate Hessian matrix $B_0$ (generally the identity matrix), the following steps are repeated as $x_k$ converges to the solution: Obtain a direction: $p_k=-B_k^{-1}\nabla f(x_k)$; Perform a line search to find an acceptable stepsize $\alpha_k$ in the direction found in the first step; Set $s_k=\alpha_kp_k$ and update $x_{k+1}=x_k+s_k$; $y_k=\nabla f(x_{k+1})-\nabla f(x_k)$; $B_{k+1}=B_k+\frac{y_ky_k^T}{y_k^Ts_k}-\frac{B_ks_ks_k^TB_k}{s_k^TB_ks_k}$. Fixed point 迭代法Fixed point参考 Wikipedia https://en.wikipedia.org/wiki/Fixed_point_(mathematics) 。 Not to be confused with a stationary point where $f’(x)=0$ . In mathematics, $c$ is a fixed point of the function $f(x)$ if $f(c) = c$. Points that come back to the same value after a finite number of iterations of the function are called periodic points. A fixed point is a periodic point with period equal to one. Fixed point 迭代定义参考 Wikipedia 。 In numerical analysis, given a function $f$ defined on the real number with real values and given a point $x_0$ in the domain of $f$, the fixed point iteration is $$x_{n+1}=f(x_n), n=0,1,2,…$$ 应用Newton’s method for finding roots of a given differentiable function $f(x)$ is $$x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}$$ If we write $g(x)=x-\frac{f(x)}{f’(x)}$, we may rewrite the Newton iteration as $$x_{n+1}=g(x_n)$$ If this iteration converges to a fixed point $x$ of $g$, then $$x=g(x)=x-\frac{f(x)}{f’(x)}$$, so $$\frac{f(x)}{f’(x)}=0$$ The reciprocal of anything is nonzero, therefore $f(x)=0$: $x$ is a root of $f$.]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>BFGS</tag>
        <tag>Fixed point</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器管理]]></title>
    <url>%2F2018%2F07%2F21%2FTips-of-Server%2F</url>
    <content type="text"><![CDATA[SSH 免密登录以下实现主机 A 到主机 B 的免密登录： 在主机 A 下生成公钥/私钥对：执行 [user@A ~]$ ssh-keygen -t rsa 后，连按三次回车键即可。 把主机 A 下生成的公钥复制远程传输到主机 B 上：执行 [user@A ~]$ scp .ssh/id_rsa.pub user@B:~/ 即可。 登录主机 B 后复制主机 A 的公钥内容到 authorized_keys：执行 [user@B ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys 即可。 注：设置 authorized_keys 文件权限为 600 。 设置系统免密登录以命令 [root@A ~]$ systemctl stop firewalld.service 关闭防火墙；以命令 [root@A ~]$ systemctl disable firewalld.service 禁用防火墙。 以命令 [root@A ~]$ setenforce 0 关闭 SELinux；修改 /etc/selinux/config 文件：SELINUX=disabled， 以禁用 SELinux 。 安装 EPEL 源EPEL，即 Extra Packages for Enterprise Linux，是为企业级 Linux 提供的一组高质量的额外软件包。 命令 [root@A ~]$ yum install epel-release 安装 rpm 包，命令 [root@A ~]$ yum clean all &amp;&amp; yum makecache 更新软件源。 系统软件安装必要安装 gcc-gfortran: [root@A ~]$ yum install gcc-gfortran gcc-c++: [root@A ~]$ yum install gcc-c++.x86_64 autojump: 命令 [root@A ~]$ yum install autojump 安装，命令 [root@A ~]$ yum install autojump-zsh.noarch 添加对 zsh 的支持。 HDF5 库：[root@A ~]$ yum install hdf5-devel htop: [root@A ~]$ yum install htop vim: [root@A ~]$ yum install vim tmux: [root@A ~]$ yum install tmux sysstat: [root@A ~]$ yum install sysstat.x86_64 locate: [root@A ~]$ yum install mlocate 可选安装 Xpm 库：[root@A ~]$ yum install libXpm-devel.x86_64 ifconfig: [root@A ~]$ yum install net-tools.x86_64 GNU Parallel: [root@A ~]$ yum install parallel.noarch eog: [root@A ~]$ yum install eog.x86_64 Xt 库：[root@A ~]$ yum install libXt-devel.x86_64 xauth: [root@A ~]$ yum install xauth （当 ssh -X 远程登录报错 X11 forwarding request failed on channel 0 时） xwindow 图形界面：[root@A ~]$ yum -y groupinstall &quot;X Window System&quot; GNU m4 宏处理器：[root@A ~]$ yum install m4.x86_64 ghostscript: [root@A ~]$ yum install ghostscript.x86_64 mail: [root@A ~]$ yum install mailx GPU 节点安装 nl 库：[root@A ~]$ yum install libnl-devel.x86_64 ~/.bashrc、/etc/bashrc 和 /etc/profile ~/.bashrc 为用户终端环境设置，仅影响当前用户；/etc/bashrc 和 /etc/profile 为系统终端环境设置，影响所有用户。 系统登录时，/etc/profile 最先被加载，而后它调用了 /etc/bashrc 以及 ~/.bashrc。 /etc/profile 对所有 shell 生效，/etc/bashrc 和 ~/.bashrc 仅对 bash 生效。 修改系统登录提示（欢迎）信息Linux 系统 SSH 的欢迎信息可以通过修改 /etc/motd 的内容来进行自定义。 但是 /etc/motd 只支持纯文本的欢迎信息。想要实现彩色效果，可以通过修改 /etc/profiles.d/motd.sh 来实现，如： 12345678910111213141516171819202122#!/bin/bashecho "==================================================="# ATTENTION:echo -en "\033[01;31m"echo -e "ATTENTION:"# 1. submitting your job at: seislab1, seislab2echo -en "\033[00m"echo -en " 1. submitting your job at: "echo -en "\033[01;32m"echo -e "seislab1, seislab2"# 2. GPU test at: seislab0echo -en "\033[00m"echo -en " 2. GPU test at: "echo -en "\033[01;32m"echo -e "seislab0"#echo -e "\033[00m" 修改主机名hostnamectl set-hostname seislab 命令修改主机名为 seislab 。 修改用户名及删除用户以下命令修改旧用户名 test 为新用户名 love： 修改用户信息及 HOME 目录：[root@A ~]$ usermod -l love -d /home/love -m test 修改用户组信息：[root@A ~]$ groumod -n love test 以命令 [root@A ~]$ userdel -rf test 删除用户 test 。 发送广播消息mesg 命令 语法：[root@A ~]$ mesg [ny] 功能：设置终端机的写入权限 参数：n/y 允许/不允许系统用户将信息直接显示在屏幕上 write 命令 语法：[user@A ~]$ write 用户名 [终端串口] 功能：向系统某一用户发送消息 wall 命令 语法：[root@A ~]$ wall &lt; 文件名 功能：向系统所有已登录用户发送文件内容 关机/重启shutdown 命令 语法：[root@A ~]$ shutdown [-t sec] [-hkr] time &quot;WARNING INFO.&quot; 参数： h: 停止所有系统服务后立即关机； k: 只发送警告信息，实际不执行关机操作； r: 停止所有系统服务后重新启动。 实例： shutdown -h now: 立即关机； shutdown -h 20:30: 在下一个 20:30 时刻关机； shutdown +5 &quot;System will shutdown after 5 minutes: 向所有登入用户发送警告，在 5 分钟后关机。 reboot 命令 语法：[root@A ~]$ reboot [-w] 参数：w 仅做测试，执行一个重开机模拟，并不真正将系统重启。 添加用户到 sudoer 列表以下实现将 user 用户添加到 sudoer 列表： 进入 root 账户，在命令行键入：[root@A ~]$ visudo，打开 sudoer 的配置文件。 向下查找到 root ALL=(ALL) ALL 内容行，在下一行参照新建行内容user ALL=(ALL) ALL，保存后退出。 pip 指定安装目录临时方法安装模块 modulename 到目录 /path/to/directory 可以使用命令：[user@A ~]$ pip install --target=/path/to/directory modulename 此方法会直接在目标目录创建 module 文件夹，因此调用前只需将该目录加入 PYTHONPATH 系统环境变量即可。 永久方法若经常需要安装一些额外的 python 函数包到目录 /path/to/directory，则可以修改用户 HOME 目录下 .pip/pip.conf（若不存在则创建），加入以下内容： 12[install]install-option=--prefix=/path/to/directory 此方法会根据安装 module 版本的不同，在目标目录下进一步创建其他子文件夹，最终在子文件夹下创建 module 文件夹，因此调用前需将子文件夹目录加入到 PYTHONPATH 系统环境变量中。 强制踢出已登录用户以下实现踢出已登录用户 user： 先使用 w 命令查看用户 user 登录的 TTY 端口号，此处假设端口号为 pts/4； 再使用命令 [root@A ~]$ pkill -kill -t pts/4 踢出。 最后使用命令 [root@A ~]$ pkill -u user 杀死该用户的所有进程。 查看系统信息 查看系统版本号：[user@A ~]$ cat /etc/centos-release 查看系统内核版本号：[user@A ~]$ uname -r 查看操作系统位数：[user@A ~]$ getconf LONG_BIT 查看系统日志：[root@A ~]$ vim /var/log/messages 查看系统字体：[user@A ~]$ fc-list；查看系统中文字体：[user@A ~]$ fc-list :lang=zh xz 压缩或解压使用 xz -z dir 命令压缩目录 dir，使用 xz -d file 命令解压文件 file。在解压以 .tar.xz 结尾的文件时，可以调用 tar -l xz -cxvf 命令。 rpm 查看系统安装包安装目录先用 rpm -qa | grep libname 命令查询 libname 安装包得到该包完整名字 libname-version.arch ，再用 rpm -ql libname-version.arch 命令查看该包安装位置。 修改系统时区先用 timedatectl set-timezone Asia/Shanghai 命令更新时区为亚洲上海时区，再用 timedatectl set-local-rtc 1 命令将硬件时钟与系统时钟调整一致。 挂载远程目录以主机 B（ip 为 192.18.1.2）挂载远程主机 A（ip 为 192.18.1.1）的共享目录 /data/share 为例： 服务端 [root@A ~]$ yum install nfs-utils rpcbind 安装 nfs-utils 和 rpcbind 服务； [root@A ~]$ chkconfig nfs on 设置 nfs 服务开机自启，[root@A ~]$ chkconfig rpcbind on 设置 rpcbind 服务开机自启； [root@A ~]$ service rpcbind start 启动 rpcbind 服务，[root@A ~]$ service nfs start 启动 nfs 服务，注意这两条命令的执行顺序； 在文件 /etc/exports 中添加内容 /data/share 192.18.1.2(rw, no_root_squash, no_subtree_check) ； [root@A ~]$ exportfs -a 使配置文件生效； [root@A ~]$ showmount -e 查看是否共享成功。 客户端 [root@B ~]$ yum install nfs-utils rpcbind 安装 nfs-utils 和 rpcbind 服务； [root@A ~]$ chkconfig nfs on 设置 nfs 服务开机自启，[root@A ~]$ chkconfig rpcbind on 设置 rpcbind 服务开机自启； [root@A ~]$ service rpcbind start 启动 rpcbind 服务，[root@A ~]$ service nfs start 启动 nfs 服务，注意这两条命令的执行顺序； [root@B ~]$ showmount -e 192.18.1.1 查看是否检测到服务端的共享 [root@B ~]$ mkdir /data/share 创建映射目录； 在文件 /etc/fstab 中添加内容 192.18.1.1:/data/share /data/share nfs rw,defaults 0 0 ； 当前启动下，执行手动挂载 [root@B ~]$ mount -t nfs 192.18.1.1:/data/share /data/share 。 安装 PbsPro 作业调度系统准备机器假设如下两台机器（CentOS 7 系统）： 主机名 主机 IP pbsmaster 192.18.1.1 pbsslave 192.18.1.2 修改两台机器的 /etc/hosts 文件，确保两台机器可以 ssh 互相访问。 安装包此处下载安装包 pbspro-14.1.0.tar.gz 。 制作 RPM 包先提前安装依赖包： 123$ yum -y install rpm-build$ yum -y install gcc autoconf automake libtool hwloc-devel$ yum -y install libX11-devel libXt-devel libedit-devel libical-devel ncurses-devel postgresql-devel python-devel python-devel tcl-devel tk-devel swig expat-devel openssl-devel libXext libXft 执行以下命令，在 /root/rpmbuild/RPMS/x86_64 目录下生成 pbspro-[ client | debuginfo | execution | server ]-14.1.0-0.x86_64.rpm 包： 1234$ mkdir -p /root/rpmbuild/SOURCES/$ mv pbspro-14.1.0.tar.gz /root/rpmbuild/SOURCES/$ cd /root/rpmbuild/SOURCES &amp;&amp; tar zxvf pbspro-14.1.0.tar.gz$ cd /root/rpmbuild/SOURCES/pbspro-14.1.0 &amp;&amp; rpmbuild -ba pbspro.spec 安装安装 Master登录至 Master 节点，命令 [root@pbsmaster /root/rpmbuild/RPMS/x86_64]$ yum install -y pbspro-server-14.1.0-0.x86_64.rpm （或者 [root@pbsmaster /root/rpmbuild/RPMS/x86_64]$ rpm -ivh pbspro-server-14.1.0-0.x86_64.rpm ）安装作业调度系统，修改 /etc/pbs.conf 文件： 12PBS_SERVER=pbsmasterPBS_START_MOM=1 安装 Slave登录至 Slave 节点，命令 [root@pbsslave /root/rpmbuild/RPMS/x86_64]$ yum install -y pbspro-execution-14.1.0-0.x86_64.rpm （或者 [root@pbsslave /root/rpmbuild/RPMS/x86_64]$ rpm -ivh pbspro-execution-14.1.0-0.x86_64.rpm ）安装作业调度系统，修改 /etc/pbs.conf 文件： 12PBS_SERVER=pbsmasterPBS_START_MOM=1 修改 /var/spool/pbs/mom_priv/config 文件： 12$clienthost pbsmaster$restrict_user_maxsysid 999 启动 pbs以命令 $ /etc/init.d/pbs start 分别在 pbsmaster 和 pbsslave 节点上启动 pbs，以命令 [root@pbsmaster ~]$ qmgr -c &#39;create node pbsslave&#39; 在 pbsmaster 主节点上将 pbsslave 节点加入集群。 查看 CPU 温度以命令 [root@A ~]$ yum install lm_sensors.x86_64 安装 lm_sensors，以 [root@A ~]$ sh -c &quot;yes|sensors-detect&quot; 检测传感器后，即可以命令 [user@A ~]$ sensors 查看 CPU 温度了。 挂载本地磁盘查看本地已挂载磁盘文件系统格式以命令 [root@A ~]$ cat /etc/fstab 查看本地已挂载磁盘文件系统格式，如 ntfs 或 ext4 等。 格式化本地磁盘命令 [root@A ~]$ mkfs -t ext4 /dev/sdb 以 ext4 文件格式格式化本地磁盘 /dev/sdb。 挂载本地磁盘命令 [root@A ~]$ mount /dev/sdb /shdisk/lab 将本地磁盘 /dev/sdb 挂载至 /shdisk/sdb 目录下。 安装字体查看系统字体以命令 [user@A ~]$ fc-list 查看所有已安装的系统字体；以命令 [user@A ~]$ fc-list:lang=zh 查看系统中的中文字体。 安装额外的字体 以管理员身份将字体文件拷贝到 /usr/share/fonts/ 目录下； [root@A ~]$ cd /usr/share/fonts ； [root@A ~]$ mkfontscale ； [root@A ~]$ mkfontdir 。 查看已安装的软件包 以 rpm 包安装的：[root@A ~]$ rpm -qa | grep packagename 以 deb 包安装的：[root@A ~]$ dpkg -l | grep packagename 以 yum 命令安装的：[root@A ~]$ yum list installed | grep packagename 修改 Ubuntu 默认终端在考虑到多终端窗口分屏显示时，可以采用命令 [root@A ~]$ apt-get install terminator 安装新的终端工具 Terminator 。但在安装该工具后会自动设置默认终端为 Terminator，可通过如下命令重置默认终端为系统自带的 gnome-terminal： gsettings set org.gnome.desktop.default-applications.terminal exec /usr/bin/gnome-terminal gsettings set org.gnome.desktop.default-applications.terminal exec-arg &quot;-x&quot; 一次性定时任务 at检查运行状态以命令 [user@A ~]$ service atd status 查看 at 的守护进程 atd 是否正在运行。 黑白名单黑名单文件为 /etc/at.deny，白名单文件为 /etc/at.allow，并遵循如下规则： 当系统中存在白名单文件时，黑名单文件将被忽略，只有写入白名单的用户才可以运行 at 命令； 当系统中只有黑名单文件中，被写入名单的用户不能运行 at 命令，且黑名单对 root 无效； 如果两个文件都不存在时，只有 root 用户可以运行 at 命令。 at 命令以命令 [user@A ~]$ at &lt;time&gt; 启动 at 命令行，并输入要执行的任务命令集合，按 [ctrl + d] 结束输入，at 命令会提示该任务的系统编号为 ##；这里，&lt;time&gt; 格式可以为： HH:MM，如 02:30 HH:MM YYYY-MM-DD，如 08:00 2018-10-10 HH:MM [am | pm] [month] [date]，如 08:00 Oct 1 HH:MM [am | pm] + number [minutes | hours | days | weeks]，如 08:00 + 1 days now + number [minutes | hours | days | weeks]，如 now + 5 minutes 以命令 [user@A ~]$ at -l 查看所有等待执行的 at 任务； 以命令 [user@A ~]$ at -c ## 查看 ## 号 at 任务的任务详情； 以命令 [user@A ~]$ at -d ## 删除正在等待执行的 ## 号 at 任务。 挂载 ntfs 硬盘并指定访问权限CentOS 系统默认不支持 ntfs 文件系统，需先行以命令 [root@A ~]$ yum install ntfs-3g 安装额外驱动 ntfs-3g。 若需指定挂载目录为 GID 为 1005 的用户组和 UID 为 1010 的用户所有，且访问权限为 750，则可以如下命令将硬盘 /dev/sdb 挂载在目录 /data 下： 1[root@A ~]$ mount -t ntfs -o rw,auto,umask=027,uid=1010,gid=1005 /dev/sdb /data 其中，访问权限设置选项 umask 采用八进制记法，对应关系如下： Octal Binary Permission 0 000 rwx 1 001 rw- 2 010 r-x 3 011 r– 4 100 -wx 5 101 -w- 6 110 –x 7 111 —]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[滑动中值滤波边界问题]]></title>
    <url>%2F2018%2F07%2F21%2FBoundary-problem-of-Moving-Median-Filter%2F</url>
    <content type="text"><![CDATA[From Wikipedia, to handle missing window entries at the boundaries of the signal, there are some schemes that have different properties that might be preferred in particular circumstances: The first value is repeated, as with the last value, to obtain enough entries to fill the window. Avoid processing the boundaries, with or without cropping the signal boundaries afterwards. Shrinking the window near the boundaries, so that every window is full. Fetching entries from other places in the signal.]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Inversion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Fortran 90 中使用 netCDF 数据格式简介]]></title>
    <url>%2F2018%2F07%2F20%2FFortran90-netCDF-Introduction%2F</url>
    <content type="text"><![CDATA[本文翻译自 Michael Thorne (michael.thorne@utah.edu) 所执笔的 Introduction to using the netCDF data format with Fortran 90（故而文中所有自称均指代原文作者），谨供学习在 Fortran 中使用 netCDF 数据格式之用。 引言netCDF（即 network Common Data Form）为存储多维数据而产生的一种基于数组的数据结构。一个 netCDF 文件采用 ASCII 头书写，以二进制格式存储数据。因为我们不必担心字节序的问题，以二进制文件来保存数据具有明显的优势。字节交换可以通过调用 netCDF 库来实现，netCDF 文件可以在任何平台上读取。与使用 netCDF 数据格式相关的特性如下： 坐标系：支持 N 维坐标系。 X 坐标（如，纬度） Y 坐标（如，经度） Z 坐标（如，高程） 时间维度 其他维度 变量：支持多重变量。 如，S 波速度，P 波速度，密度，应力分量…… 空间几何：支持多种网格类型（隐式或显式）。 规则网格（隐式） 不规则网格 数据点 自我描述：数据集可以包括数据定义信息。 单位（如，km，m/sec……） 注释（如，标题，调用约定，变量名（如，P 波速度），坐标单位（如，km/sec），……） 关于数据格式的更全的文档在： netCDF 主页 netCDF 文档 F90 接口指导 文件名约定：netCDF 文件通常以 .nc 为扩展名。文件约定：有很多 netCDF 数据风格和约定。在地震学中，人们对 .grd 文件（GMT 软件生成）最熟悉。为了符合 GMT 的要求，采用 COARDS (Cooperative Ocean/Atmosphere Research Data Service) 数据约定书写 netCDF 文件。我开始使用 netCDF 文件的原因之一是，网格信息也可以随数据一同保存下来。因此，在使用类似 GMT 的软件时我不必显式地书写 xyz2grd 命令对数据成图和记忆正在成图的数据文件的范围（GMT 中的 -R 选项）以及网格增量（-I 选项）是多少。然而，只能在直角坐标系统下使用 COARDS 约定。坐标可以不等间距，但必须单调递增或单调递减。很不幸，在不使用类似 blockmean 的命令对数据进行预处理时，GMT 是不能对不等间距网格进行操作的。可视化：使用 netCDF 格式还有一个明显的优势，即有多种数据查看器。另外，几乎所有的我熟悉的可视化包都可以读取 netCDF 格式。这里有一些常用的免费查看器或可视化包： Ncview Data Explorer (OpenDX) 文件结构netCDF 文件包含如下结构： netCDF 文件结构 作用 全局属性 描述文件内容 维度 描述数据结构（如，时间，深度，纬度，经度） 变量 按照维度存储数据的数组 变量属性 描述每个变量的内容 另参见 博文]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>netCDF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 配置、技巧及其周边]]></title>
    <url>%2F2018%2F07%2F20%2FTips-of-Vim%2F</url>
    <content type="text"><![CDATA[常用配置函数Vim 有一些配置函数，利用这些函数，我们可以通过修改配置文件让我们的 Vim 发挥出更强大的功能。 line(expr) The result is a Number , which is the line number of the file position given with expr .The accepted positions are: “.” the cursor position; “$” the last line in the current buffer; x position of mark “x” (if the mark is not set, 0 is returned). 返回值是一个整数。这个函数功能时返回一个行号。如果你后面的参数 expr 是 “.” 的话，则返回当前光标所在的位置。如果 expr 是 “$” 则返回当前缓冲区最后一行的行号。如果 expr 的值是一个标签名，则返回你对应的标签所在的行号。例如：call line(“.”) 得到当前光标所在的行号。 col({expr})返回指定位置的列号，列号从1开始算起。例如：echo col(“.”) 返回光标所在的列号。echo col(“$”) 返回光标所在的行的长度+1。echo col([2,’$’]) 返回第2行的长度+1。（之所以是长度+1是因为，其实每行的最后有一个不可打印的换行符） setpos({expr})移动光标到指定的行和列。例如：let pos=[0, 25, 15, 0]; call setpos(“.”, pos) 移动光标到 25 行 15 列的位置。 setline ({lnum}, {text}) Set line {lnum} of the current buffer to {text}.If this succeeds, 0 is returned. If this fails (most likely lnum is invalid) 1 is returned.When {lnum} is just below the last line the {text} will be added as a new line. 这个函数就是将第 lnum 行的内容替换成 text 中的内容。如果这个 lunm 行是最后一行的下面一行，那么将新建一行，然后将 text 的内容存放到这一行。如果不是最后一行的下一行，则要满足的条件是行号为 lnum 的行必须是存在的。例如：call setline(1, “/*********************/“) 在文件的开头添加上面的一行，主要是用于 .c/.cpp 文件注释的。 getline({lnum}, {end}) Without the {end},the result is a String, which is line {lnum} from the current buffer.When {end} is given the result is a List where each item is a line from the current buffer in the range {lnum} to {end}, including line {end}. 返回值是一个字符串。当 end 参数存在的时候，函数返回行号为 lnum 的内容，否则函数将返回行 lnum 到行 end 的所有内容（包括第 end 行）。例如：let lines=getline(2, 5); call append(6, lines) 取得 2-5 行的内容，然后从第六行的下一行开始添加，保持原来的格式不变。 append(lnum, string) Append the text string after line lnum in the current buffer. lnum can be zero, to insert a line before the first one. Returns 1 for failure (lnum out of range) or 0 for success. 这个函数就是将 string 这个字符串，插入到行号为 lnum 的下一行。成功则返回 0，否则返回 1 。 expand(expr [, flag]) Expand the file wildcards in expr . The result is a String .When the result of expr starts with% , # or &lt; , the expansion is done like for the cmdline- special variables with their associated modifiers. There cannot be a white space between the variables and the following modifier. When the current or alternate file name is not defined, % or # use an empty string. Using %:p in a buffer with no name results in the current directory, with a “/ ”added.When {expr} starts with ‘%’, ‘#’ or ‘&lt;’, the expansion is done like for the |cmdline-special| variables with their associated modifiers. Here is a short overview:“%” current file name;“#“ alternate file name;“#n” alternate file name n.Modifiers::p expand to full path;:h head (last path component removed);:t tail (last path component only);:r root (one extension removed);:e extension only. 函数的返回值是一个字符串。功能就是将参数 expr 这个通配符进行扩展。各个通配符的含义上面列出来了。例如：call append(2, “File Name: “.expand(“%”)) 在文件的第三行写入这句话 “File Name: ${filename}”，这边%表示当前文件的名称，通过函数expand（”%”）将其还原成了文件名字符串。let sourcefilepath=expand(“%:p”) 获取到当前文件的完全路径（绝对路径）。 配置函数应用举例在用 Vim 打开文件后，在命令模式下，输入命令1:echo col(".") 即返回光标所在的列号。在「$HOME/.vimrc」文件中添加如下语句 123if has("autocmd") au BufReadPost * if line("'.") &gt; 0 &amp;&amp; line("'.") &lt;= line("$") | exe "normal! `." | endifendif 此设置即在文件打开时，如果文件上次编辑的位置存在（即不在 1 行和最大行数以外），自动跳转至上次编辑的位置。此外，可以使用1au BufReadPost * if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! '\"" | endif 跳转至上次离开的行首。使用1au BufReadPost * if line("'\"") &gt; 0 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! `\"" | endif 跳转至上次离开的位置。 Vim 配置收录以下： 配置 功能 set hlsearch 搜索时高亮反白匹配字符串 set autoindent 自动缩排 set ruler 底边显示状态栏 set showmode 左下角显示模式状态 set nu 行首显示行号 set bg=dark 设置底色色调 syntax on 开启语法检查 set nocompatible 不使用兼容模式 set textwidth=0 或 set tw=0 设置行宽，为 0 时即不自动换行 set backup 开启自动备份 set bdir=~/.vim 设置备份目录 set history=50 设置命令历史长度 set tabstop=4 或 set ts=4 设置制表符 tab 长度 set shiftwidth=2 或 set sw=2 设置自动缩进空格数 set showcmd 显示命令 set showmatch 显示匹配 set ignorecase 忽略大小写 set incsearch 输入搜索命令时显示当前匹配 set autowrite 执行外部命令时自动保存 set nolist 不显示不可见字符 set mouse=a 鼠标可用 set nowrap 不自动折行 set expandtab 采用空格代替制表符 tab 缩进 set cursorline 高亮当前行 set relativenumber 显示相对行号 注：本表持续更新中 将以上配置写入「 $HOME/.vimrc 」文件，即可对所有文件打开生效。如果想要对某些文件采用不同的打开初始配置，可在相应的文件末尾加入类似如下语句1# vim:ft=make:sw=4:wrap 该文件为一个 makefile 文件，第一个字符 “#” 为 makefile 文件的注释符，不同的文件可以采用各自相应的注释符。”ft=make” 即指文件格式为 makefile 文件，Vim 自动按 makefile 语法高亮文本，”sw=4” 即设置自动缩进空格数为 4，”wrap” 即设置自动折行，在这里，省去配置语句中的 set，不同的配置语句间用 “:” 隔开。 Vim 命令技巧收录以下： 命令 作用 :se cuc 垂直竖杠（即 see cursorcolum） :Sex 浏览目录 注：本表持续更新中 更多 Vim 插件介绍参见 博文 。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My First Blog Attemp]]></title>
    <url>%2F2018%2F07%2F18%2FMy-first-blog-attemp%2F</url>
    <content type="text"><![CDATA[Welcome but enter password to read Incorrect Password! No content to display! U2FsdGVkX18/vafn0ok2kE5vV7JtjDhBEfHE2oaV0Nk47Uem1T6wc70OBYznTuJe94Y0DgCLO9LoL3btYNlhsdzQe5eYNI2yO9nf4LpjvBHpiYkrKsmTNR4TnAVjAyF9es1e2zuGPgX/47ZF6Up+9N+akf4W7K5hueCx2D4lm977CKtt73XtRUCnDUqXG0ipot57OUiagLHP2MhVJC2B4xw9PvanSyW8qrznel3ls7vyFBz8+NjC0/A8iZ0LFxXJZkFHRW6/vo/AXXTtfh9x7uCb81BbG03lWdHRF0kKmcbMhYBcTLNoEoELBfsSSQSU2PWXLscacZ0GGbLnHYiC5s0jQN2O8XFcQfjo5hDfJ5wFzKKFuwVWOyIqjzTg0nDkaNwkSYlRQwWhSCpFcmTIEcnrkdX4uj3FfB/m0FF7Av/5Q8QsMhYH3OqN+2mwX8gjTEmvQQ6oLcYa024RIwu7c+BzWsN0y1FdcPPBfIAvE4FjzH9w+12pdjcnqa1Hvj599x63bU0ePn80i8KQQte69Xp24GhAnzBb4jnsoC9BLRZ/bFjeVorBbgE2p4nVZvYj6r8OYNBU3cvJoiuHsFWsNqfLGmYxbNwUC9mH0E7fXPPTVEcZBJvMSZMvekcupOD+9UNx3xLQzNHU3mmrFyruU2feb92PM4AQcsezwECzbop1p72gpj71TZIeP+MN8wXZeVBkM8IYolhW56bl6d+d6KpWW5ERNLGWV1/2bOLmFmN1Y2l8z/1c2KyNMG3oyVIY1XU2hN11sFxMEIQUe8zSKqGcBl2hapokb/Y4sm9hXbHgV90KUpO2zkM4KQx8fZhsYhXiV/0ri9gu+TFuUiepn6XcMJCuH/g3NXSG3mnWIdbQRgXy+YC9RD0naHTmvCiJbkv/MFBfa83V3MB99h6jqFxRNvnRaMf3Ai432JpA2cmY1Zp8qxpnGvl60T0xIw7ZlGXGhl+i54CYLPbHwYGRkG4kmxAvDOGijqZpfErT57DqPjlvNRFoiH1JtnGAy26MddG+laFbLnrxeY/6L0PjthnLSib4PR1THFlGuHUPrw0Bs3HrkuV+FCR1YZxjGa5BRZmjQJfmQENPF/cBszWLYVyDzGaQXz8YCGbiMxVeqhLAAH1q7zaoG7RaxrLvlLSJdHIMfvo+OtlippqhQO6Sx0dHY1ig5lS9HGvS2yXGvItiUFkgwyNqWbhPiVBpUmPolqznoTTwG0PhkxhHinB9UPP53QdKq+Ak8mIdX2FMH1OsYoI2WXXus3qcozC3mkQwEfkKtzh61TBpgP0p6cvesYw/7ytuZt3YaJLReDRw5+RPGdcWcLNNwR0/26y2Y+qe9WNtng3btZTkb9Acfqw7WBeIZ2g0zho/teDNhlIvRM9M4qlYXHDAljTqohhF0nifghQQJSv6uF5izSbuy9DKm5WTOy+VBPsbCPZnLwTXizB//Cb/vSTE7B9ux1FjqgzKPnPcZUgqsdGIGfYE43nh1pddiFWbJbjgriikDlxEnCEicJfg+kdagZbrG66WpC2mQNQsMCEFWS9h9Eb3gDDaXJsBVkbfF5Ls5IrA4n67qUp8hy1Ouy4cmv6Y1hof5K5WxMefmiUA9qtO1dQANDsfZcJZPOWRjErwbk8w+L6zX3uH/UAiRfgXwLZGoYMw91YE5mLX0yRF0uuoV+P+fUX7ZNIQnKe6v6QHYKoq76KDdPyqAUvTjqIRXrlF6nvfLYnce+8YKYGq/WlLwGwG7dv5ufTl9G8pZFxLwTn4YCDNw+MYU1aByp3AjpG+OBcb3Tc6EoMMZyQAUmQuts/3c49kFQAbpTjsBWTR+rc35Uju5vgLHcv3jmT5Z3frAi9imxp6teZQ47y+64a90IbVt3mP8yp8zUBURIXqLR3rqVNQZONrAb1BR/M5VpurnbrLl8jojIquYDqXJfSGVuW5ODAoUoqWwCTvreqhUnA4yuSy7hzDTAXAdFHduQw5YZd0swfXMmvQEsD08vyTXRcl2TCKrkt2oHXeeueWWoCRiAdiRAa6oi1rJlAsuVLkkJrbzx9Pa8m9lmJETE3/zGacJ+JmEq9gekT+dUnR5cGuW8zSGvnqXd69bIqCqMU2IzwSEvEIpn/B99i8pj/Dk6POyJUhLW5S5miesohkUR27boG83fPIHpjA14d/jTWLGoE6dYBGJtzHG5uJhIPGI2b0SS/vIPw0x4/VYH2XNtyLxfEMRUV6IzeaKHF5zA64WHo+5QoxUgxjBRiASuZ68iuAnr/rndXq9JL/2qUf8N3QFLXQ36ztYwv9TJhEtHeN+L5e/gKmV2rW9IQ8qnDUK6OIf7BW0hZz1RqDhMrOYfsQBatGHMGjsHZ3v4ya9LqRJLgOIVPDoedcg/UAO3Al+uIovJRgCbE5440h3IKcdxdMzhyam4OwfQ2PmFrWzRMArSnPmd9RU5AOv7BQTEkOzKA8kQB31ZE49tTQCtLKv17UVgftccRBCnoNeY/WXyADQzwt0IsQuyiURvnnm+m4RgqXlTqJJQfvUH7nzoCCQcmpguqBJ8pVBfZMW7fAwAfdb0RwtoM4CNrtm6+B7DSTYEg1OT3oQD3gOUqmxKQVxyG0u16sF54Im+St+zDbmuZ4KRC4V0Hwwn5MPbml1xLQdnHB/+bdth/4E+JLBMHFuoHkPfxGT7pNII50gJuMyhx+c/PhrkwdObm/C3K8E+JxE4YqciRAdcFd9ihlpDcCHeAnYLFfqb8zZpz4c5AbIUYr0y7/vweQQ4VKs83lM6ELOubOppEi3Ht05nEKeCJaTWGz+Hd1xiUmh8NyEipSiBNqTVmxo355ID0+4ZHwFRo6dniK6Q0jmKFVwof+1xEK2TmYQ+q9p7AdXLyGjuQRL88FUKwhf8jzSJAApruYzDrbYhPQlFZGa0pt8jQR/LjGj6hn7RcHS+vb2/tRJYdGolSy3phpJ/Gx1r4kltpcTv/+FTpc4qOYqeU33J02txhWEadK/1TsRaJuFwLhtxpIc0PeQ7SQ4nj/f6y5SYX2bYalBXJ5rQ/BxV3fFd3JwlFNtoSMQ6dQydk1CDwhcCaSd9nHtpA7+4bk0rbftZ8IR8+3iIkcivOytL7vTQxThp4v2Z8V57SNS9L/+4yk/+IED1ljlL/fLU8xdwPTHBTyJ2JykSSKykdgo/X6f/+ZRyniEFHpeYt06QunWwi69uu3k2FzCpnYnZ0mmHJVHb694gLYvmm4l8Rnu1navGMelA62jI46WUQbTxEnsWNB90mXaZrFuoDzS6zdkK+Kj2NzJpYxW1mEvBMP31Tk34W+SHb7Kp4TIIgYxxftmDcaXxdqbZcqgKckzkRuLCPb2njj5mvIJKcuEXtJjTXavZfkJGRWYyXdfLUWOPuJsgI/9r13eF5vwBcf8RnrDhBSdDFiRGKLe+3NEA67071apm/oGTDI7qvpRKQCsrDiUTYMgOhHSWrhvjqFAsyOTcnsoPAdWpJ2NuexJI7k0QD/W4YXfkPCzN0cAkm9ZfP/q53wW45JaJAixLRnEjVyTBNFjagPbTHeI/CdMimDuFOoHQin8yxijhyCaG6cAqAj+ep0YqfdNyuN4EYt3kq9+/07EIcWWO1R6WzHZv85wrreqLpDDSW2NxeN2KjVE7JigBN2uZK/VkreCTbkZS+oMESGEZnnbuG/sH7CI8CUKQOOV9WqKiHKphz5JCf1Kn7eaXo1w8b6dJBRB8LispZRV3u3egc1LGJuzi8lx/zIUgod3sPRVsoz4vh3fCHTQnPHhGyJXqRyYzaYZ1m9geigA6UEz1CvcWGzp9iE0bQgLBFial0PvWgw6LJzgOgdc2DX5dhpEUt6+dZ9JKwPPLKVUmYkyV06Ejy8ggTu4j+0uYNXoFqT7/o3X1GL0dp8wqdq34ZUxLUvkTvytxxIR+NQsWkawt6luekMHKVzD4Gv2crlt2lvTMLD24l7PqTXxlFs6by/o3APRVolwW4m44vMkXOI5mXAzJeeVZo2l4xUblmk7Y59PlE0nX/ArBDAWZyk/uJcTrJkdXq5H57+UQbKwTR69a11baUqa4fdpuA+ina0aeMkUPX/9L32sOvP2Ue1oBUzpQI3qfxj5vkmyEapG3vENcaz9HUkA8fot/CLRSufnscScgMMoFKX15/+jOgx6n2gt+PMsv5FD/5lENZgrTGLIoHgFDGZXI5DLqcr3N2rbeqnGLAlUBfTmi7ERqU7T01x1IMqVJwgplQ0gblXMa8tbXFYgGpKS9BUsu8xEI3MosXbR0cb3GzZAvaZDWDu364R33iQytrOr2w0sL9+xKqTenlQEsoSG4EMZxIVJV5SPzdLIN3pGlzu8bSgagMrk+ud8kTmA6eajS3EQSRwmbl6bTfxlBNhleD3a57uZmeWltfJS6vrhUGYwkMYmgwOeX8iHNxNwnRVGrqlyRJFaZ2zccjEgaLdD3m9Zan6aRp0UDxl+KJR+bV2o4dsTZwFDwkk+4QHprMQzPHymkA+m0uUkrDVl2rrmq5uviXoam1C3kR9EQofylNfKTTp7xT89vI9GVi3EiD4G4OI383paPyoVareMaZztgqyTPGJ6gNCQeKkB5ZKnAQc8FOmSLjxEIq6UbDCOw//6P6np6UEdf9WuDLw2mWpUjf2x8llAbdY0BuvUvXyD1NgGg/hUFXrSR099KjpJwEGLfSetTZOw27gZmOkyitxrOE6zSE7IdDSy5Nigy+h7IJrsqedWBpF8o/aRo8MTPSG0lQtHB4Y+vbEym77FZRZ5sRr1oIbegLcWL0oFfWtu0a1Y5hcEMQrKcp1NoDocp/Y3TKVzog9dSusA92sf68ASHjUWWxZBh2lGK1nBKUKk7Ozhf4ztc9W0HEVFdvUtA3CCSxQDNELwQA8dVC90UXzfwEqj3IUyn6MHypJcAtB2ENK/+p87myfcTERJLypaFJsjQZwV5tKNP3cdKEFBfoYtBUOa351OG4StFrIhRctADlxzKmWCPaL3xBTiYAeldNOwn7aRHeHjC0RNIBDqPQE8OUmJ7+DkBmaF1P/wmhNTpswQooj2njO8SOspmZ2d/AnKNBcIw+UMv0dw3GGDs69Rd7V2x75YzeAiY6j2j7wLJ5zjySFYBYw30mm4xj1TY8GLBT3syQ2KXFZIeBm/neteWa3NgoLZrgXt2txLq8ttsNW9zwqyAB+16ZzjOBafcGhfGhChRkRQk+l6NITKTVyUWphZ1h90QFOFm12ZrxqOitrxJhQT0RXJdhVlh/kAPMLKhFSX4K1q0+qVHKYHr27770BI3UUncOTXws47QX6e6NFbAB90jNZxnyUMHLItd7AHLCo7djX3VVOw+GiApqEnjbIlUysrhxdMlo+RoKPX0Ir1whREaG47H8RdzEdE0RmAz/jviTG2QkSG006seJzARj0fQLmWnkRiejTLrWJRrsfBeowNB5f/6GEWWy1ZQuBGJKQTpTwAq+5vR4PAbmlq7kSJIrXOY8laPyVVK67j7vEgK16LuFmum4+0qtsNRG9ltoHjRXma3VTip2P+zPeIb4KO+1MlNvyrUUAqekPY64kbENhgSJSB6eu8n0ye8p017MA2JQqm5cj7Yor6jek0xlYW8Vob67MqGBRyj0EhWnKRCrGY9VgYg/uH7M4ZNDlrmz/xbyUpkn3v5kHgrvpVrQOels1YgEKJ0fEZ6sKmkZoaaCsKwBo4c7QKIZINWncx4OrWCLDI9vIAj8Xkja7jQmTv+kVO/EHmQ+0usPE3Isx3Pl3Z7ssBNeKv/z1o7x+J0nfAWB4cdCgo7c87fb6/eUZ4OIgQy3MHczixAn+HmYTX3/p1x7luZ44yTyjXjM8K8HYFXaUZ65cA9Dcg5vu7OcoGXuaFA/MpUFBTDdbEsKJzjVBq4NFiJ0dvy7rlNde0aT0aYEYdE89JgnzPbIp3ux4ICIHb3QWFcaydq1VLMiNe6OgRxvc2x2GpljcLtqxK0wWUWtOkGII0YoltdSB3+lkWmnwn947E/k26vuZbh5i5L6pSfTkoZS9ABM9LxEqNvIE9T20Vz8GNgi+2PLjsl+ESqgXQSLJg5HT9MMrYXkMi/mhi64w9spyvWWFzuE+oKgvlndrm3pJ10p0EgaPGxKYCzYrPwkc4L2plWhEbwRExr9l4/L1/Yb6KNOKfzY2rJXsx9+un41a75rhSCKf9m3LrWDhotY2x/S9vGsDkHcosyjlTZjFibXGcECW8RhSqH87gaYLZa2RZqaavIf+qND9YcjUiS40S6By/LCp3DwVHVpxXmmUqKz4AhjME6zo0ZAiib6+EN1lils4Gp+EmMXf8fsrwllZaZ6CYynKCGGYwkEEgS6WW6Kk/X1vh8mNRaR1WPR2PklEo17TFHSSfNwO+9AkPnobFL5hlh1YYWFrFiYGua8FYYvKbJSAXMHP5R3zdNRrtgLkVpecqvBzxItijlVCHw==]]></content>
      <categories>
        <category>New Attemp</category>
      </categories>
      <tags>
        <tag>WillDelete</tag>
      </tags>
  </entry>
</search>
